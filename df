[1mdiff --git a/src/person-behavior.h b/src/person-behavior.h[m
[1mindex 3ee8a58..5071a97 100644[m
[1m--- a/src/person-behavior.h[m
[1m+++ b/src/person-behavior.h[m
[36m@@ -163,14 +163,14 @@[m [mstruct MatingBehaviour : public Behavior {[m
                 ->no_acts_sigma[year_index][person->social_behaviour_factor_]));[m
 [m
         // Scenario healthy male has intercourse with infected acute female[m
[31m-        if (mate->state_ == GemsState::kAcute &&[m
[31m-            person->state_ == GemsState::kHealthy &&[m
[32m+[m[32m        if (mate->_ == Gems::kAcute &&[m
[32m+[m[32m            person->_ == Gems::kHealthy &&[m
             random->Uniform() <[m
                 (1.0 -[m
                  pow(1.0 - sparam->infection_probability_acute_fm, no_acts))) {[m
[31m-          person->state_ = GemsState::kAcute;[m
[32m+[m[32m          person->_ = Gems::kAcute;[m
           person->transmission_type_ = TransmissionType::kCasualPartner;[m
[31m-          person->infection_origin_state_ = mate->state_;[m
[32m+[m[32m          person->infection_origin__ = mate->_;[m
           person->infection_origin_sb_ = mate->social_behaviour_factor_;[m
           // AM: Add MatingBehaviour only when male gets infected[m
           /*person->AddBehavior(new MatingBehaviour());[m
[36m@@ -178,14 +178,14 @@[m [mstruct MatingBehaviour : public Behavior {[m
           MatingBehaviour()) in MatingBehaviour::Run()" << std::endl;*/[m
         }[m
         // Scenario healthy male has intercourse with infected chronic female[m
[31m-        else if (mate->state_ == GemsState::kChronic &&[m
[31m-                 person->state_ == GemsState::kHealthy &&[m
[32m+[m[32m        else if (mate->_ == Gems::kChronic &&[m
[32m+[m[32m                 person->_ == Gems::kHealthy &&[m
                  random->Uniform() <[m
                      (1.0 - pow(1.0 - sparam->infection_probability_chronic_fm,[m
                                 no_acts))) {[m
[31m-          person->state_ = GemsState::kAcute;[m
[32m+[m[32m          person->_ = Gems::kAcute;[m
           person->transmission_type_ = TransmissionType::kCasualPartner;[m
[31m-          person->infection_origin_state_ = mate->state_;[m
[32m+[m[32m          person->infection_origin__ = mate->_;[m
           person->infection_origin_sb_ = mate->social_behaviour_factor_;[m
           // AM: Add MatingBehaviour only when male gets infected[m
           /*person->AddBehavior(new MatingBehaviour());[m
[36m@@ -193,14 +193,14 @@[m [mstruct MatingBehaviour : public Behavior {[m
           MatingBehaviour()) in MatingBehaviour::Run()" << std::endl;*/[m
         }[m
         // Scenario healthy male has intercourse with infected treated female[m
[31m-        else if (mate->state_ == GemsState::kTreated &&[m
[31m-                 person->state_ == GemsState::kHealthy &&[m
[32m+[m[32m        else if (mate->_ == Gems::kTreated &&[m
[32m+[m[32m                 person->_ == Gems::kHealthy &&[m
                  random->Uniform() <[m
                      (1.0 - pow(1.0 - sparam->infection_probability_treated_fm,[m
                                 no_acts))) {[m
[31m-          person->state_ = GemsState::kAcute;[m
[32m+[m[32m          person->_ = Gems::kAcute;[m
           person->transmission_type_ = TransmissionType::kCasualPartner;[m
[31m-          person->infection_origin_state_ = mate->state_;[m
[32m+[m[32m          person->infection_origin__ = mate->_;[m
           person->infection_origin_sb_ = mate->social_behaviour_factor_;[m
           // AM: Add MatingBehaviour only when male gets infected[m
           /*person->AddBehavior(new MatingBehaviour());[m
[36m@@ -209,14 +209,14 @@[m [mstruct MatingBehaviour : public Behavior {[m
         }[m
         // Scenario healthy male has intercourse with infected failing treatment[m
         // female[m
[31m-        else if (mate->state_ == GemsState::kFailing &&[m
[31m-                 person->state_ == GemsState::kHealthy &&[m
[32m+[m[32m        else if (mate->_ == Gems::kFailing &&[m
[32m+[m[32m                 person->_ == Gems::kHealthy &&[m
                  random->Uniform() <[m
                      (1.0 - pow(1.0 - sparam->infection_probability_failing_fm,[m
                                 no_acts))) {[m
[31m-          person->state_ = GemsState::kAcute;[m
[32m+[m[32m          person->_ = Gems::kAcute;[m
           person->transmission_type_ = TransmissionType::kCasualPartner;[m
[31m-          person->infection_origin_state_ = mate->state_;[m
[32m+[m[32m          person->infection_origin__ = mate->_;[m
           person->infection_origin_sb_ = mate->social_behaviour_factor_;[m
           // AM: Add MatingBehaviour only when male gets infected[m
           /*person->AddBehavior(new MatingBehaviour());[m
[36m@@ -224,45 +224,45 @@[m [mstruct MatingBehaviour : public Behavior {[m
           MatingBehaviour()) in MatingBehaviour::Run()" << std::endl;*/[m
         }[m
         // Scenario infected acute male has intercourse with healthy female[m
[31m-        else if (mate->state_ == GemsState::kHealthy &&[m
[31m-                 person->state_ == GemsState::kAcute &&[m
[32m+[m[32m        else if (mate->_ == Gems::kHealthy &&[m
[32m+[m[32m                 person->_ == Gems::kAcute &&[m
                  random->Uniform() <[m
                      (1.0 - pow(1.0 - sparam->infection_probability_acute_mf,[m
                                 no_acts))) {[m
[31m-          mate->state_ = GemsState::kAcute;[m
[32m+[m[32m          mate->_ = Gems::kAcute;[m
           mate->transmission_type_ = TransmissionType::kCasualPartner;[m
[31m-          mate->infection_origin_state_ = person->state_;[m
[32m+[m[32m          mate->infection_origin__ = person->_;[m
           mate->infection_origin_sb_ = person->social_behaviour_factor_;[m
         }  // Scenario infected chronic male has intercourse with healthy female[m
[31m-        else if (mate->state_ == GemsState::kHealthy &&[m
[31m-                 person->state_ == GemsState::kChronic &&[m
[32m+[m[32m        else if (mate->_ == Gems::kHealthy &&[m
[32m+[m[32m                 person->_ == Gems::kChronic &&[m
                  random->Uniform() <[m
                      (1.0 - pow(1.0 - sparam->infection_probability_chronic_mf,[m
                                 no_acts))) {[m
[31m-          mate->state_ = GemsState::kAcute;[m
[32m+[m[32m          mate->_ = Gems::kAcute;[m
           mate->transmission_type_ = TransmissionType::kCasualPartner;[m
[31m-          mate->infection_origin_state_ = person->state_;[m
[32m+[m[32m          mate->infection_origin__ = person->_;[m
           mate->infection_origin_sb_ = person->social_behaviour_factor_;[m
         }  // Scenario infected treated male has intercourse with healthy female[m
[31m-        else if (mate->state_ == GemsState::kHealthy &&[m
[31m-                 person->state_ == GemsState::kTreated &&[m
[32m+[m[32m        else if (mate->_ == Gems::kHealthy &&[m
[32m+[m[32m                 person->_ == Gems::kTreated &&[m
                  random->Uniform() <[m
                      (1.0 - pow(1.0 - sparam->infection_probability_treated_mf,[m
                                 no_acts))) {[m
[31m-          mate->state_ = GemsState::kAcute;[m
[32m+[m[32m          mate->_ = Gems::kAcute;[m
           mate->transmission_type_ = TransmissionType::kCasualPartner;[m
[31m-          mate->infection_origin_state_ = person->state_;[m
[32m+[m[32m          mate->infection_origin__ = person->_;[m
           mate->infection_origin_sb_ = person->social_behaviour_factor_;[m
         }  // Scenario infected failing treatment male has intercourse with[m
            // healthy female[m
[31m-        else if (mate->state_ == GemsState::kHealthy &&[m
[31m-                 person->state_ == GemsState::kFailing &&[m
[32m+[m[32m        else if (mate->_ == Gems::kHealthy &&[m
[32m+[m[32m                 person->_ == Gems::kFailing &&[m
                  random->Uniform() <[m
                      (1.0 - pow(1.0 - sparam->infection_probability_failing_mf,[m
                                 no_acts))) {[m
[31m-          mate->state_ = GemsState::kAcute;[m
[32m+[m[32m          mate->_ = Gems::kAcute;[m
           mate->transmission_type_ = TransmissionType::kCasualPartner;[m
[31m-          mate->infection_origin_state_ = person->state_;[m
[32m+[m[32m          mate->infection_origin__ = person->_;[m
           mate->infection_origin_sb_ = person->social_behaviour_factor_;[m
         } else {[m
           ;  // if both are infected or both are healthy, do nothing[m
[36m@@ -343,100 +343,100 @@[m [mstruct RegularMatingBehaviour : public Behavior {[m
     if (person->hasPartner() && person->age_ < env->GetMaxAge()) {[m
       // Scenario healthy male has intercourse with infected acute female[m
       // partner[m
[31m-      if (person->partner_->state_ == GemsState::kAcute &&[m
[31m-          person->state_ == GemsState::kHealthy &&[m
[32m+[m[32m      if (person->partner_->_ == Gems::kAcute &&[m
[32m+[m[32m          person->_ == Gems::kHealthy &&[m
           random->Uniform() <[m
               (1.0 - pow(1.0 - sparam->infection_probability_acute_fm,[m
                          sparam->no_regular_acts_mean[year_index]))) {[m
[31m-        person->state_ = GemsState::kAcute;[m
[32m+[m[32m        person->_ = Gems::kAcute;[m
         person->transmission_type_ = TransmissionType::kRegularPartner;[m
[31m-        person->infection_origin_state_ = person->partner_->state_;[m
[32m+[m[32m        person->infection_origin__ = person->partner_->_;[m
         // AM: Add MatingBehaviour only when infected[m
         // person->AddBehavior(new MatingBehaviour());[m
       }[m
       // Scenario healthy male has intercourse with infected chronic female[m
       // partner[m
[31m-      else if (person->partner_->state_ == GemsState::kChronic &&[m
[31m-               person->state_ == GemsState::kHealthy &&[m
[32m+[m[32m      else if (person->partner_->_ == Gems::kChronic &&[m
[32m+[m[32m               person->_ == Gems::kHealthy &&[m
                random->Uniform() <[m
                    (1.0 - pow(1.0 - sparam->infection_probability_chronic_fm,[m
                               sparam->no_regular_acts_mean[year_index]))) {[m
[31m-        person->state_ = GemsState::kAcute;[m
[32m+[m[32m        person->_ = Gems::kAcute;[m
         person->transmission_type_ = TransmissionType::kRegularPartner;[m
[31m-        person->infection_origin_state_ = person->partner_->state_;[m
[32m+[m[32m        person->infection_origin__ = person->partner_->_;[m
         // AM: Add MatingBehaviour only when infected[m
         // person->AddBehavior(new MatingBehaviour());[m
       }[m
       // Scenario healthy male has intercourse with infected treated female[m
       // partner[m
[31m-      else if (person->partner_->state_ == GemsState::kTreated &&[m
[31m-               person->state_ == GemsState::kHealthy &&[m
[32m+[m[32m      else if (person->partner_->_ == Gems::kTreated &&[m
[32m+[m[32m               person->_ == Gems::kHealthy &&[m
                random->Uniform() <[m
                    (1.0 - pow(1.0 - sparam->infection_probability_treated_fm,[m
                               sparam->no_regular_acts_mean[year_index]))) {[m
[31m-        person->state_ = GemsState::kAcute;[m
[32m+[m[32m        person->_ = Gems::kAcute;[m
         person->transmission_type_ = TransmissionType::kRegularPartner;[m
[31m-        person->infection_origin_state_ = person->partner_->state_;[m
[32m+[m[32m        person->infection_origin__ = person->partner_->_;[m
         // AM: Add MatingBehaviour only when infected[m
         // person->AddBehavior(new MatingBehaviour());[m
       }[m
       // Scenario healthy male has intercourse with infected failing treatment[m
       // female partner[m
[31m-      else if (person->partner_->state_ == GemsState::kFailing &&[m
[31m-               person->state_ == GemsState::kHealthy &&[m
[32m+[m[32m      else if (person->partner_->_ == Gems::kFailing &&[m
[32m+[m[32m               person->_ == Gems::kHealthy &&[m
                random->Uniform() <[m
                    (1.0 - pow(1.0 - sparam->infection_probability_failing_fm,[m
                               sparam->no_regular_acts_mean[year_index]))) {[m
[31m-        person->state_ = GemsState::kAcute;[m
[32m+[m[32m        person->_ = Gems::kAcute;[m
         person->transmission_type_ = TransmissionType::kRegularPartner;[m
[31m-        person->infection_origin_state_ = person->partner_->state_;[m
[32m+[m[32m        person->infection_origin__ = person->partner_->_;[m
         // AM: Add MatingBehaviour only when infected[m
         // person->AddBehavior(new MatingBehaviour());[m
       }[m
       // Scenario infected acute male has intercourse with healthy female[m
       // partner[m
[31m-      else if (person->partner_->state_ == GemsState::kHealthy &&[m
[31m-               person->state_ == GemsState::kAcute &&[m
[32m+[m[32m      else if (person->partner_->_ == Gems::kHealthy &&[m
[32m+[m[32m               person->_ == Gems::kAcute &&[m
                random->Uniform() <[m
                    (1.0 - pow(1.0 - sparam->infection_probability_acute_mf,[m
                               sparam->no_regular_acts_mean[year_index]))) {[m
[31m-        person->partner_->state_ = GemsState::kAcute;[m
[32m+[m[32m        person->partner_->_ = Gems::kAcute;[m
         person->partner_->transmission_type_ =[m
             TransmissionType::kRegularPartner;[m
[31m-        person->partner_->infection_origin_state_ = person->state_;[m
[32m+[m[32m        person->partner_->infection_origin__ = person->_;[m
       }  // Scenario infected chronic male has intercourse with healthy female[m
          // partner[m
[31m-      else if (person->partner_->state_ == GemsState::kHealthy &&[m
[31m-               person->state_ == GemsState::kChronic &&[m
[32m+[m[32m      else if (person->partner_->_ == Gems::kHealthy &&[m
[32m+[m[32m               person->_ == Gems::kChronic &&[m
                random->Uniform() <[m
                    (1.0 - pow(1.0 - sparam->infection_probability_chronic_mf,[m
                               sparam->no_regular_acts_mean[year_index]))) {[m
[31m-        person->partner_->state_ = GemsState::kAcute;[m
[32m+[m[32m        person->partner_->_ = Gems::kAcute;[m
         person->partner_->transmission_type_ =[m
             TransmissionType::kRegularPartner;[m
[31m-        person->partner_->infection_origin_state_ = person->state_;[m
[32m+[m[32m        person->partner_->infection_origin__ = person->_;[m
       }  // Scenario infected treated male has intercourse with healthy female[m
          // partner[m
[31m-      else if (person->partner_->state_ == GemsState::kHealthy &&[m
[31m-               person->state_ == GemsState::kTreated &&[m
[32m+[m[32m      else if (person->partner_->_ == Gems::kHealthy &&[m
[32m+[m[32m               person->_ == Gems::kTreated &&[m
                random->Uniform() <[m
                    (1.0 - pow(1.0 - sparam->infection_probability_treated_mf,[m
                               sparam->no_regular_acts_mean[year_index]))) {[m
[31m-        person->partner_->state_ = GemsState::kAcute;[m
[32m+[m[32m        person->partner_->_ = Gems::kAcute;[m
         person->partner_->transmission_type_ =[m
             TransmissionType::kRegularPartner;[m
[31m-        person->partner_->infection_origin_state_ = person->state_;[m
[32m+[m[32m        person->partner_->infection_origin__ = person->_;[m
       }  // Scenario infected failing treatment male has intercourse with[m
          // healthy female partner[m
[31m-      else if (person->partner_->state_ == GemsState::kHealthy &&[m
[31m-               person->state_ == GemsState::kFailing &&[m
[32m+[m[32m      else if (person->partner_->_ == Gems::kHealthy &&[m
[32m+[m[32m               person->_ == Gems::kFailing &&[m
                random->Uniform() <[m
                    (1.0 - pow(1.0 - sparam->infection_probability_failing_mf,[m
                               sparam->no_regular_acts_mean[year_index]))) {[m
[31m-        person->partner_->state_ = GemsState::kAcute;[m
[32m+[m[32m        person->partner_->_ = Gems::kAcute;[m
         person->partner_->transmission_type_ =[m
             TransmissionType::kRegularPartner;[m
[31m-        person->partner_->infection_origin_state_ = person->state_;[m
[32m+[m[32m        person->partner_->infection_origin__ = person->_;[m
       } else {[m
         ;  // if both are infected or both are healthy, do nothing[m
       }[m
[36m@@ -468,9 +468,9 @@[m [mstruct GetOlder : public Behavior {[m
   }[m
 [m
   // AM: Get HIV-related mortality rate[m
[31m-  float get_mortality_rate_hiv(int state,[m
[32m+[m[32m  float get_mortality_rate_hiv(int ,[m
                                const std::vector<float>& hiv_mortality_rate) {[m
[31m-    return hiv_mortality_rate[state];[m
[32m+[m[32m    return hiv_mortality_rate[];[m
   }[m
 [m
   void Run(Agent* agent) override {[m
[36m@@ -502,7 +502,7 @@[m [mstruct GetOlder : public Behavior {[m
 [m
       if (random->Uniform() <=[m
           sparam[m
[31m-              ->sociobehavioural_risk_probability[year_index][person->state_]) {[m
[32m+[m[32m              ->sociobehavioural_risk_probability[year_index][person->_]) {[m
         person->social_behaviour_factor_ = 1;[m
       } else {[m
         person->social_behaviour_factor_ = 0;[m
[36m@@ -534,7 +534,7 @@[m [mstruct GetOlder : public Behavior {[m
       person->biomedical_factor_ = 0;[m
     }[m
 [m
[31m-    // AM: HIV state transition, depending on current year and population[m
[32m+[m[32m    // AM: HIV  transition, depending on current year and population[m
     // category (important for transition to treatment)[m
     int year_population_category = -1;[m
 [m
[36m@@ -572,10 +572,10 @@[m [mstruct GetOlder : public Behavior {[m
       }[m
     }[m
     const auto& transition_proba =[m
[31m-        sparam->hiv_transition_matrix[person->state_][year_population_category];[m
[32m+[m[32m        sparam->hiv_transition_matrix[person->_][year_population_category];[m
     for (size_t i = 0; i < transition_proba.size(); i++) {[m
       if (random->Uniform() < transition_proba[i]) {[m
[31m-        person->state_ = i;[m
[32m+[m[32m        person->_ = i;[m
         break;[m
       }[m
     }[m
[36m@@ -587,7 +587,7 @@[m [mstruct GetOlder : public Behavior {[m
     // HIV-related mortality[m
     float rand_num_hiv = static_cast<float>(random->Uniform());[m
     if (rand_num_hiv <[m
[31m-        get_mortality_rate_hiv(person->state_, sparam->hiv_mortality_rate)) {[m
[32m+[m[32m        get_mortality_rate_hiv(person->_, sparam->hiv_mortality_rate)) {[m
       stay_alive = false;[m
     }[m
     // Age-related mortality[m
[36m@@ -647,9 +647,9 @@[m [mstruct GiveBirth : public Behavior {[m
     // Compute risk factors[m
     child->social_behaviour_factor_ = 0;[m
     child->biomedical_factor_ = 0;[m
[31m-    // Stores the current GemsState of the child.[m
[31m-    if (mother->state_ == GemsState::kHealthy) {[m
[31m-      child->state_ = GemsState::kHealthy;[m
[32m+[m[32m    // Stores the current Gems of the child.[m
[32m+[m[32m    if (mother->_ == Gems::kHealthy) {[m
[32m+[m[32m      child->_ = Gems::kHealthy;[m
 [m
       ///! The aguments below are currently either not used or repetitive.[m
       // // Store the year when the agent got infected[m
[36m@@ -661,35 +661,35 @@[m [mstruct GiveBirth : public Behavior {[m
     //}[m
     // AM: birth infection probability depends on whether mother is treated and[m
     // current year[m
[31m-    else if (mother->state_ == GemsState::kTreated) {[m
[32m+[m[32m    else if (mother->_ == Gems::kTreated) {[m
       if (random_generator->Uniform() <[m
           sparam->birth_infection_probability_treated) {[m
[31m-        child->state_ = GemsState::kAcute;[m
[32m+[m[32m        child->_ = Gems::kAcute;[m
         child->transmission_type_ = TransmissionType::kMotherToChild;[m
[31m-        child->infection_origin_state_ = mother->state_;[m
[32m+[m[32m        child->infection_origin__ = mother->_;[m
       } else {[m
[31m-        child->state_ = GemsState::kHealthy;[m
[32m+[m[32m        child->_ = Gems::kHealthy;[m
       }[m
     } else if (year < 2003 ||[m
[31m-               mother->state_ ==[m
[31m-                   GemsState::kFailing) {  // AM: Mother is not healthy and not[m
[32m+[m[32m               mother->_ ==[m
[32m+[m[32m                   Gems::kFailing) {  // AM: Mother is not healthy and not[m
                                            // treated[m
       if (random_generator->Uniform() <[m
           sparam->birth_infection_probability_untreated) {[m
[31m-        child->state_ = GemsState::kAcute;[m
[32m+[m[32m        child->_ = Gems::kAcute;[m
         child->transmission_type_ = TransmissionType::kMotherToChild;[m
[31m-        child->infection_origin_state_ = mother->state_;[m
[32m+[m[32m        child->infection_origin__ = mother->_;[m
       } else {[m
[31m-        child->state_ = GemsState::kHealthy;[m
[32m+[m[32m        child->_ = Gems::kHealthy;[m
       }[m
     } else {[m
       if (random_generator->Uniform() <[m
           sparam->birth_infection_probability_prophylaxis) {[m
[31m-        child->state_ = GemsState::kAcute;[m
[32m+[m[32m        child->_ = Gems::kAcute;[m
         child->transmission_type_ = TransmissionType::kMotherToChild;[m
[31m-        child->infection_origin_state_ = mother->state_;[m
[32m+[m[32m        child->infection_origin__ = mother->_;[m
       } else {[m
[31m-        child->state_ = GemsState::kHealthy;[m
[32m+[m[32m        child->_ = Gems::kHealthy;[m
       }[m
     }[m
 [m
[36m@@ -711,7 +711,7 @@[m [mstruct GiveBirth : public Behavior {[m
       child->AddBehavior(new GiveBirth());[m
     } else {[m
       child->AddBehavior(new MatingBehaviour());[m
[31m-      /*if (child->state_ != GemsState::kHealthy){[m
[32m+[m[32m      /*if (child->_ != Gems::kHealthy){[m
           child->AddBehavior(new MatingBehaviour());[m
       }*/[m
       child->AddBehavior(new RegularMatingBehaviour());[m
[1mdiff --git a/src/sim-param.cc b/src/sim-param.cc[m
[1mindex c64e24c..1c3462b 100644[m
[1m--- a/src/sim-param.cc[m
[1m+++ b/src/sim-param.cc[m
[36m@@ -119,7 +119,8 @@[m [mvoid SimParam::SetHivTransitionMatrix() {[m
         // For all years and population categories[m
         hiv_transition_matrix[i][j].resize(nb_states);[m
         hiv_transition_matrix[i][j] = {[m
[31m-            0.0, 0.0, 1.0, 1.0, 1.0};  // After one year ACUTE, go to CHRONIC[m
[32m+[m[32m            // 0.0, 0.0, 1.0, 1.0, 1.0};  // After one year ACUTE, go to CHRONIC[m
[32m+[m[32m            0.0, 1.0, 1.0, 1.0, 1.0};  //[m[41m [m
       } else if (i == GemsState::kChronic) {[m
         if (j ==[m
             0) {  // Prior to 2003, for all (women 15-40, children and others)[m
[1mdiff --git a/src/sim-param.h b/src/sim-param.h[m
[1mindex fe9f86a..a983750 100644[m
[1m--- a/src/sim-param.h[m
[1m+++ b/src/sim-param.h[m
[36m@@ -63,25 +63,25 @@[m [mclass SimParam : public ParamGroup {[m
   // Mortality rate by age. Size(mortality_rate_by_age) must be equal to[m
   // 1+size(mortality_rate_age_transition).[m
   std::vector<int> mortality_rate_age_transition{15, 50, 90};[m
[31m-  std::vector<float> mortality_rate_by_age{0.01, 0.005, 0.05, 1.0};[m
[32m+[m[32m  // std::vector<float> mortality_rate_by_age{0.01, 0.005, 0.05, 1.0};[m
   // Test - No death[m
[31m-  // std::vector<float> mortality_rate_by_age{0.0, 0.0, 0.0, 0.0};[m
[32m+[m[32m  std::vector<float> mortality_rate_by_age{0.0, 0.0, 0.0, 0.0};[m
 [m
   // HIV-related mortality. For Healthy, Acute, Chronic, Treated, Failing states[m
[31m-  std::vector<float> hiv_mortality_rate{0.0, 0.0, 0.05, 0.01, 0.1};[m
[32m+[m[32m  // std::vector<float> hiv_mortality_rate{0.0, 0.0, 0.05, 0.01, 0.1};[m
   // Test - No death[m
[31m-  // std::vector<float> hiv_mortality_rate{0.0, 0.0, 0.0, 0.0, 0.0};[m
[32m+[m[32m  std::vector<float> hiv_mortality_rate{0.0, 0.0, 0.0, 0.0, 0.0};[m
 [m
   // AM: Probability to migrate[m
   // TO DO AM: Make this probability dependent on the origin location?[m
[31m-  float migration_probability = 0.01;  // 0.0; // No Mogration //0.01;[m
[32m+[m[32m  float migration_probability = 0.0; //0.01;  // 0.0; // No Mogration //0.01;[m
   // AM: Migration year index[m
   const std::vector<int> migration_year_transition{1960};[m
   // AM: Migration Matrix. Year index x Location x Location[m
   std::vector<std::vector<std::vector<float>>> migration_matrix;[m
 [m
   // AM: Probability that a single man wants to engage in regular partnership[m
[31m-  float regular_partnership_probability = 1.0;[m
[32m+[m[32m  float regular_partnership_probability = 0.0; //1.0;[m
 [m
   // AM: Probability that a couple in regular partnership separate[m
   float break_up_probability = 1.0;[m
[36m@@ -143,12 +143,12 @@[m [mclass SimParam : public ParamGroup {[m
   // 1) disease state, 2) sex of partners Male-to-female[m
   float coef_infection_probability = 2;[m
   float infection_probability_acute_mf = 9.3e-3 * coef_infection_probability;[m
[31m-  float infection_probability_chronic_mf = 1.9e-3 * coef_infection_probability;[m
[32m+[m[32m  float infection_probability_chronic_mf = 9.3e-3 * coef_infection_probability; // 1.9e-3 * coef_infection_probability;[m
   float infection_probability_treated_mf = 1.3e-4 * coef_infection_probability;[m
   float infection_probability_failing_mf = 7.6e-4 * coef_infection_probability;[m
   // Female-to-male[m
   float infection_probability_acute_fm = 4.8e-3 * coef_infection_probability;[m
[31m-  float infection_probability_chronic_fm = 9.5e-4 * coef_infection_probability;[m
[32m+[m[32m  float infection_probability_chronic_fm = 4.8e-3 * coef_infection_probability; // 9.5e-4 * coef_infection_probability;[m
   float infection_probability_treated_fm = 6.5e-4 * coef_infection_probability;[m
   float infection_probability_failing_fm = 3.9e-4 * coef_infection_probability;[m
   // Male-to-male[m
[36m@@ -217,7 +217,8 @@[m [mclass SimParam : public ParamGroup {[m
   // + p_Chronic(|HIV+) + p_Treated(|HIV+) + p_Failing(|HIV+) These probablities[m
   // involve 15-49 years old agents, located in seed districts. 1/5 of HIV[m
   // infected are in acute phase, others are chronic.[m
[31m-  std::vector<float> initial_infection_probability{0.2, 1.0, 1.0, 1.0};[m
[32m+[m[32m  //std::vector<float> initial_infection_probability{0.2, 1.0, 1.0, 1.0};[m
[32m+[m[32m  std::vector<float> initial_infection_probability{1.0, 1.0, 1.0, 1.0}; // JE: make all acute[m
   // Initial probability to be healthy for 15-49 years old in seed districts[m
   float initial_healthy_probability;[m
 [m
[36m@@ -237,7 +238,7 @@[m [mclass SimParam : public ParamGroup {[m
   // typical birth rate in the region. We substracted 0.06 to account for child[m
   // motability and reach a realistic demographic development from 1960-2020.[m
   // Parameter 0.21 is used in Janne's R implementation.[m
[31m-  float give_birth_probability = 0.188;  // 0.18[m
[32m+[m[32m  float give_birth_probability = 0; // 0.188;  // 0.18[m
 [m
   // AM : Probability for agent to be infected at birth, if its mother is[m
   // infected and treated[m
[36m@@ -260,7 +261,8 @@[m [mclass SimParam : public ParamGroup {[m
   // depending on year (see sociobehavioural_risk_year_transition) and health[m
   // state (Healthy, Acute, Chronic, Treated, Failing)[m
   const std::vector<std::vector<float>> sociobehavioural_risk_probability{[m
[31m-      {0.05, 0.5, 0.5, 0.5, 0.5}, {0.05, 0.05, 0.05, 0.05, 0.05}};[m
[32m+[m[32m    {0.0, 0.0, 0.0, 0.0, 0.0}, {0.0, 0.0, 0.0, 0.0, 0.0}};[m
[32m+[m[32m     // {0.05, 0.5, 0.5, 0.5, 0.5}, {0.05, 0.05, 0.05, 0.05, 0.05}};[m
 [m
   float biomedical_risk_probability = 0.05;[m
 [m
